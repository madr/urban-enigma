//
//    /$$ /$$$$$$$                      /$$                                                             /$$
//    /$$/| $$__  $$                    | $$                                                            |  $$
//   /$$/ | $$  \ $$  /$$$$$$   /$$$$$$ | $$  /$$$$$$   /$$$$$$$  /$$$$$$        /$$$$$$/$$$$   /$$$$$$  \  $$
//  /$$/  | $$$$$$$/ /$$__  $$ /$$__  $$| $$ |____  $$ /$$_____/ /$$__  $$      | $$_  $$_  $$ /$$__  $$  \  $$
// |  $$  | $$__  $$| $$$$$$$$| $$  \ $$| $$  /$$$$$$$| $$      | $$$$$$$$      | $$ \ $$ \ $$| $$$$$$$$   /$$/
//  \  $$ | $$  \ $$| $$_____/| $$  | $$| $$ /$$__  $$| $$      | $$_____/      | $$ | $$ | $$| $$_____/  /$$/
//   \  $$| $$  | $$|  $$$$$$$| $$$$$$$/| $$|  $$$$$$$|  $$$$$$$|  $$$$$$$      | $$ | $$ | $$|  $$$$$$$ /$$/
//    \__/|__/  |__/ \_______/| $$____/ |__/ \_______/ \_______/ \_______/      |__/ |__/ |__/ \_______/|__/
//                            | $$
//                            | $$
//                            |__/
// ╔══════════════════════════════════════════════════════════════════════════╗
// ║ ASCII art:    http://www.patorjk.com/software/taag/                      ║
// ║ 7-1 pattern:  https://sass-guidelin.es/#architecture                     ║
// ║ KSS:          http://warpshire.com/kss/                                  ║
// ╚══════════════════════════════════════════════════════════════════════════╝

// The abstracts/ folder gathers all Sass tools and helpers used across the
// project. Every global variable, function, mixin and placeholder should be
// put in here.
//   The rule of thumb for this folder is that it should not output a single
// line of CSS when compiled on its own. These are nothing but Sass helpers.
@import "abstracts/variables", "abstracts/functions", "abstracts/mixins",
  "abstracts/placeholders";

// The vendors/ folder containing all the CSS files from external libraries
// and frameworks – Normalize, Bootstrap, jQueryUI, and so on.
// @import
//   'vendor/foo',
//   'vendor/bar';

// The base/ folder holds what we might call the boilerplate code for the
// project. In there, you might find the reset file, some typographic rules,
// and probably a stylesheet defining some standard styles for commonly used
// HTML elements.
@import //'base/animations',
    "base/reset",
  //'base/base',
    "base/typography";

// The layout/ folder contains everything that takes part in laying out the
// site or application. This folder could have stylesheets for the main parts
// of the site (header, footer, navigation, sidebar…), the grid system or even
// CSS styles for all the forms.
@import "layout/navigation", "layout/grid",
  //'layout/header',
    //'layout/footer',
    //'layout/sidebar',
    "layout/forms";

// For smaller components, there is the components/ folder. While layout/ is
// macro (defining the global wireframe), components/ is more focused on
// widgets. It contains all kind of specific modules like a slider, a loader,
// a widget, and basically anything along those lines. There are usually a lot
// of files in components/ since the whole site/application should be mostly
// composed of tiny modules.
@import "components/set-list";

// If you have page-specific styles, it is better to put them in a pages/
// folder, in a file named after the page. For instance, it’s not uncommon to
// have very specific styles for the home page hence the need for a _home.scss
// file in pages/.
// @import
//  'pages/home';

// On large sites and applications, it is not unusual to have different themes.
// There are certainly different ways of dealing with themes but I personally
// like having them all in a themes/ folder.
// @import
//  'themes/theme';

// There is an interesting concept that has been made popular by Harry Roberts,
// Dave Rupert and Chris Coyier that consists of putting all the CSS
// declarations, hacks and things we are not proud of in a shame file.
//   This file, dramatically titled _shame.scss, would be imported after any
// other file, at the very end of the stylesheet.
// @import '_shame';
